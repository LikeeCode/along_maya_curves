proc float findParamAtDistance( string $curve, 
                                string $arcLD, 
                                float $distance, 
                                float $epsilon )
{
  float $u = 0.0;
  
  float $min = `getAttr ( $curve + ".minValue" )`;
  float $max = `getAttr ( $curve + ".maxValue" )`;

  setAttr ( $arcLD + ".uParamValue" ) $max;
  float $arcLength = `getAttr ( $arcLD + ".arcLength" )`;
  
  // Don't bother doing any work for the start or end of the curve.
  //
  if ( $distance <= 0.0 ) return 0.0;
  if ( $distance >= $arcLength ) return $max;

  // This is merely a diagnostic to measure the number of passes required to 
  // find any particular point. You may be surprised that the number of 
  // passes is typically quite low.
  //
  int $pass = 1;

  while ( true )
  {
    $u = ( $min + $max ) / 2.0;
    setAttr ( $arcLD + ".uParamValue" ) $u;
    $arcLength = `getAttr ( $arcLD + ".arcLength" )`;
    if ( abs( $arcLength - $distance ) < $epsilon ) break;
    if ( $arcLength > $distance ) $max = $u;
    else $min = $u;
    $pass++;
  }
  
  return $u;
}

// createCube curve1 2.0 27
proc createCube(string $curve, float $span, int $num){
    // Determine the U range for this curve
    float $maxU = `getAttr ( $curve + ".maxValue" )`;
  
    // Create an arcLengthDimension node for the curve
    string $arcLD = `arcLengthDimension ( $curve + ".u[" + $maxU + "]" )`;
    
    for($i = 0; $i < $num; $i++){
        // Find uParam
        float $epsilon = 0.0001;
        float $distance = $span * $i;
        float $uParam = findParamAtDistance( $curve, $arcLD, $distance, $epsilon );
    
        // Get position and normals
        float $p[3] = `pointOnCurve -pr $uParam -p $curve`;
        float $nt[3] = `pointOnCurve -pr $uParam -nt $curve`;
        float $rot[3] = `angleBetween -euler -v1 $nt[0] $nt[1] $nt[2] -v2 1 0 0`;
    
        // Draw, move and rotate a cube
        string $cube[] = `polyCube -w 1 -h 1 -d 1`;
        move $p[0] $p[1] $p[2];
        rotate $rot[0] (180 - $rot[1]) $rot[2];
    }
    
    delete $arcLD;
}
